// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.4
// source: proto/course.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CourseIDEService_CreateImage_FullMethodName = "/course.CourseIDEService/CreateImage"
	CourseIDEService_CreatePod_FullMethodName   = "/course.CourseIDEService/CreatePod"
)

// CourseIDEServiceClient is the client API for CourseIDEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseIDEServiceClient interface {
	CreateImage(ctx context.Context, in *CourseIDECreateRequest, opts ...grpc.CallOption) (CourseIDEService_CreateImageClient, error)
	CreatePod(ctx context.Context, in *PodCreateRequest, opts ...grpc.CallOption) (*PodCreateResponse, error)
}

type courseIDEServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseIDEServiceClient(cc grpc.ClientConnInterface) CourseIDEServiceClient {
	return &courseIDEServiceClient{cc}
}

func (c *courseIDEServiceClient) CreateImage(ctx context.Context, in *CourseIDECreateRequest, opts ...grpc.CallOption) (CourseIDEService_CreateImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CourseIDEService_ServiceDesc.Streams[0], CourseIDEService_CreateImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &courseIDEServiceCreateImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CourseIDEService_CreateImageClient interface {
	Recv() (*CourseIDECreateResponse, error)
	grpc.ClientStream
}

type courseIDEServiceCreateImageClient struct {
	grpc.ClientStream
}

func (x *courseIDEServiceCreateImageClient) Recv() (*CourseIDECreateResponse, error) {
	m := new(CourseIDECreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *courseIDEServiceClient) CreatePod(ctx context.Context, in *PodCreateRequest, opts ...grpc.CallOption) (*PodCreateResponse, error) {
	out := new(PodCreateResponse)
	err := c.cc.Invoke(ctx, CourseIDEService_CreatePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseIDEServiceServer is the server API for CourseIDEService service.
// All implementations must embed UnimplementedCourseIDEServiceServer
// for forward compatibility
type CourseIDEServiceServer interface {
	CreateImage(*CourseIDECreateRequest, CourseIDEService_CreateImageServer) error
	CreatePod(context.Context, *PodCreateRequest) (*PodCreateResponse, error)
	mustEmbedUnimplementedCourseIDEServiceServer()
}

// UnimplementedCourseIDEServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourseIDEServiceServer struct {
}

func (UnimplementedCourseIDEServiceServer) CreateImage(*CourseIDECreateRequest, CourseIDEService_CreateImageServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (UnimplementedCourseIDEServiceServer) CreatePod(context.Context, *PodCreateRequest) (*PodCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePod not implemented")
}
func (UnimplementedCourseIDEServiceServer) mustEmbedUnimplementedCourseIDEServiceServer() {}

// UnsafeCourseIDEServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseIDEServiceServer will
// result in compilation errors.
type UnsafeCourseIDEServiceServer interface {
	mustEmbedUnimplementedCourseIDEServiceServer()
}

func RegisterCourseIDEServiceServer(s grpc.ServiceRegistrar, srv CourseIDEServiceServer) {
	s.RegisterService(&CourseIDEService_ServiceDesc, srv)
}

func _CourseIDEService_CreateImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CourseIDECreateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CourseIDEServiceServer).CreateImage(m, &courseIDEServiceCreateImageServer{stream})
}

type CourseIDEService_CreateImageServer interface {
	Send(*CourseIDECreateResponse) error
	grpc.ServerStream
}

type courseIDEServiceCreateImageServer struct {
	grpc.ServerStream
}

func (x *courseIDEServiceCreateImageServer) Send(m *CourseIDECreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CourseIDEService_CreatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseIDEServiceServer).CreatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseIDEService_CreatePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseIDEServiceServer).CreatePod(ctx, req.(*PodCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseIDEService_ServiceDesc is the grpc.ServiceDesc for CourseIDEService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseIDEService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course.CourseIDEService",
	HandlerType: (*CourseIDEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePod",
			Handler:    _CourseIDEService_CreatePod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateImage",
			Handler:       _CourseIDEService_CreateImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/course.proto",
}
